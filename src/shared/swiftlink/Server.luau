--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Swift Link v0.1.2 (https://github.com/robloxjw02-dev/Swift-Link)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild("SWIFT_LINK_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = "SWIFT_LINK_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild("SWIFT_LINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = "SWIFT_LINK_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local ReceiveCursor = 0
local ReceiveBuffer = buffer.create(64)

local ReceiveInstances = {}
local ReceiveInstanceCursor = 0

type BufferSave = {Size: number, Cursor: number, Buffer: buffer, Instances: {Instance}}

local function Read(Bytes: number)
    local Offset = ReceiveCursor
    ReceiveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local Types = {}
local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)


function Types.ReadEVENT_Booleans(): ({boolean})
	local BLOCK_START = Read(2)
	local Value: {boolean};
	-- START ARRAY
	local Length = buffer.readu16(ReceiveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value = table.create(Length)
	local ARRAY_START_1 = Read(1 * Length)
	for Index = 1, Length do
		local Item_1;
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1 = (buffer.readu8(ReceiveBuffer, OPERATION_OFFSET) == 1)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

function Types.WriteEVENT_Booleans(Value: {boolean}): ()
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value)
	local ARRAY_START_1 = Allocate(1 * #Value)
	for Index = 1, #Value do
		local Item_1 = Value[Index]
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1 and 1 or 0)
	end
	-- END ARRAY
end

function Types.ReadEVENT_StructOfNumbers(): ({{ id: number, x: number, y: number, z: number, orientation: number, animation: number,  }})
	local BLOCK_START = Read(2)
	local Value: {{ id: number, x: number, y: number, z: number, orientation: number, animation: number,  }};
	-- START ARRAY
	local Length = buffer.readu16(ReceiveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value = table.create(Length)
	local ARRAY_START_1 = Read(9 * Length)
	for Index = 1, Length do
		local Item_1;
		Item_1 = {} :: any
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.id = buffer.readu16(ReceiveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.x = buffer.readi8(ReceiveBuffer, OPERATION_OFFSET)
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.y = buffer.readi16(ReceiveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.z = buffer.readi8(ReceiveBuffer, OPERATION_OFFSET)
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Item_1.orientation = buffer.readi16(ReceiveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.animation = buffer.readu8(ReceiveBuffer, OPERATION_OFFSET)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

function Types.WriteEVENT_StructOfNumbers(Value: {{ id: number, x: number, y: number, z: number, orientation: number, animation: number,  }}): ()
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value)
	local ARRAY_START_1 = Allocate(9 * #Value)
	for Index = 1, #Value do
		local Item_1 = Value[Index]
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET, Item_1.id)
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writei8(SendBuffer, OPERATION_OFFSET, Item_1.x)
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writei16(SendBuffer, OPERATION_OFFSET, Item_1.y)
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writei8(SendBuffer, OPERATION_OFFSET, Item_1.z)
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writei16(SendBuffer, OPERATION_OFFSET, Item_1.orientation)
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1.animation)
	end
	-- END ARRAY
end


local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end

RunService.Heartbeat:Connect(StepReplication)

Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	ReceiveCursor = 0
	ReceiveBuffer = Buffer
	ReceiveInstances = Instances
	ReceiveInstanceCursor = 0
	local Size = buffer.len(ReceiveBuffer)
	while (ReceiveCursor < Size) do
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(ReceiveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: {boolean} = Types.ReadEVENT_Booleans()
			if Events.Reliable[0] ~= nil then
				task.spawn(Events.Reliable[0], Player, Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"Booleans\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value} :: {any})
			end
		elseif Index == 1 then
			local Value: {{ id: number, x: number, y: number, z: number, orientation: number, animation: number,  }} = Types.ReadEVENT_StructOfNumbers()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Player, Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"StructOfNumbers\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value} :: {any})
			end
		end
	end
end)

Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	ReceiveCursor = 0
	ReceiveBuffer = Buffer
	ReceiveInstances = Instances
	ReceiveInstanceCursor = 0
	local Size = buffer.len(ReceiveBuffer)
	while (ReceiveCursor < Size) do
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(ReceiveBuffer, BLOCK_START + 0)
	end
end)

return {
	StepReplication = StepReplication,
	Booleans = {
		setCallback = function(Listener: (Player: Player, Value: {boolean}) -> ()): () -> ()
			Events.Reliable[0] = Listener
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[0] or {}
				Queue.Reliable[0] = nil
				for Index, Arguments in EventQueue do
					task.spawn(Listener, table.unpack(Arguments))
				end
			end)
			return function (): ()
				Queue.Reliable[0] = {}
				Events.Reliable[0] = nil
			end
		end
	},
	StructOfNumbers = {
		setCallback = function(Listener: (Player: Player, Value: {{ id: number, x: number, y: number, z: number, orientation: number, animation: number,  }}) -> ()): () -> ()
			Events.Reliable[1] = Listener
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[1] or {}
				Queue.Reliable[1] = nil
				for Index, Arguments in EventQueue do
					task.spawn(Listener, table.unpack(Arguments))
				end
			end)
			return function (): ()
				Queue.Reliable[1] = {}
				Events.Reliable[1] = nil
			end
		end
	},
}