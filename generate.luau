local fs = require("@lune/fs")
local net = require("@lune/net")
local process = require("@lune/process")
local DateTime = require("@lune/datetime")

local PATTERN = "%(Last Updated %d+/%d+/%d+ %d+:%d+:%d+ UTC%)"
local SEPARATOR = "*The tables below were automatically generated by this [script](https://github.com/robloxjw02-dev/roblox-network-benchmark/blob/main/generate.luau).*\n"

local HeaderData = string.split(fs.readFile("README.md"), SEPARATOR)
local Header = string.gsub(HeaderData[1], "\n*$", "")

local isFirstTime = not string.match(Header, PATTERN) 

local now = DateTime.now()
local FormattedTime = now:formatUniversalTime("%D %H:%M:%S UTC", "en")

Header = isFirstTime and Header .. " (Last Updated " .. FormattedTime .. ")" or string.gsub(Header, PATTERN, "(Last Updated " .. FormattedTime .. ")")

local Contents = `{Header}\n{SEPARATOR}`

local ResultJSON = fs.readFile("./result.json")
local Result = net.jsonDecode(ResultJSON)

local function QueryWMIC(Component: string, Properties: string): {string}
    local SpawnResult = process.spawn("wmic", {Component, "get", Properties})
    assert(SpawnResult.ok, SpawnResult.stderr)

    local Lines = string.split(SpawnResult.stdout, "\n")

    --> Remove header and padding
    table.remove(Lines, 1)
    table.remove(Lines, #Lines)
    table.remove(Lines, #Lines)

    --> Parse text
    local QueryResult = {}
    for Index, Line in Lines do
        --> Remove padding
        Line = string.gsub(Line, "\r", "")
        Line = string.sub(Line, 1, #Line - 1)

        if Component == "cpu" then
            table.insert(QueryResult, Line)
            continue
        end

        local SubResult = {}
        local LineResults = string.split(Line, " ")
        for Index, Result in LineResults do
            --> Ignore empty lines
            if string.gsub(Result, "%c", "") == "" then
                continue
            end

            table.insert(SubResult, Result)
        end

        table.insert(QueryResult, SubResult)
    end

    return QueryResult
end

local function WriteComputerSpecs()
    local Processor = QueryWMIC("cpu", "name")
    local MemorySticks = QueryWMIC("memorychip", "Capacity,Speed")
    
    Contents ..= `\n## Computer Specs`
    Contents ..= `\nProcessor: \`{Processor[1]}\`  `

    for Slot, Stick in MemorySticks do
        local Capacity = tonumber(Stick[1])
        Capacity //= 1e+9
        Contents ..= `\nMemory #{Slot}: \`{Capacity}GB {Stick[2]}\`  `
    end

    Contents ..= "\n"
end

type Benchmark = {
    Sent: number,
    Receive: number,
    Bandwidth: {number},
    Framerate: {number}
}

local Metrics = {
    {
        Label = "FPS",
        Samples = "Framerate"
    },
    {
        Label = "Kbps",
        Samples = "Bandwidth"
    }
}

local function WriteToolResults(Name: string, Results: {[string]: Benchmark})
    local Output = `\n## [{Name}](https://github.com/robloxjw02-dev/roblox-network-benchmark/blob/main/src/shared/benches/{Name}.luau)\n`

    for i, Metric in Metrics do
        Output ..= `|Benchmark ({Metric.Label})|Median|P0|P80|P90|P95|P100|Loss (%)|`
        Output ..= `\n|---|---|---|---|---|---|---|---|`
        for Tool, Result in Results do
            local Loss = math.floor((1 - (Result.Receive / Result.Sent)) * 100)
            local Link = `{Tool}`
            if Loss > 50 then
                Output ..= `\n|{Link}|-|-|-|-|-|-|{Loss}%`
                continue
            end

            local Numbers = Result[Metric.Samples]
            local Formatted = table.create(#Numbers)
            for Index, Value in Numbers do
                Formatted[Index] = string.format("%.2f", Value)
            end

            Output ..= `\n|{Link}|{table.concat(Formatted, '|')}|{Loss}%|`
        end

        if i < #Metrics then
            Output ..= string.rep("\n", 2)
        end
    end

    Contents ..= Output 
end

--> Write computer specs
WriteComputerSpecs()

--> Sort tools alphabetically
local Array = {}

for Name, Benchmarks in Result do
    table.insert(Array, Name)
end

table.sort(Array, function(a, b)
    return #a < #b
end)

for i, Name in Array do
    WriteToolResults(Name, Result[Name])
    if i < #Array then
        Contents ..= "\n"
    end
end

-- --> Output results
fs.writeFile("README.md", Contents)
print(`Success!`)